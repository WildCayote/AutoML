services:
  db:
    image: postgis/postgis
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - inventory_dev_db_data:/var/lib/postgresql/data
    networks:
      - automl

  pgadmin4:
    image: dpage/pgadmin4
    ports:
      - 8001:80
    env_file:
      - .env
    volumes:
      - inventory_dev_pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - automl

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automl

  user-be:
    restart: always
    build:
      context: ./user-be
      dockerfile: Dockerfile
    image: ${USER_BE_IMAGE:-user-be:dev}
    ports:
      - 3001:3001
    volumes:
      - ./user-be:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - .env
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      AWS_EC2_METADATA_DISABLED: "true"
      AWS_SDK_LOAD_CONFIG: "false"
    depends_on:
      db:
        condition: service_healthy
      pgadmin4:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - automl

  data-profiling-node:
    build:
      context: ./data-profiling-node
      dockerfile: Dockerfile
    volumes:
      - ./data-profiling-node:/profiling
      - /profiling/.venv
    env_file:
      - .env
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 8000:8000
    networks:
      - automl

  feature-engineering-node:
    build:
      context: ./feature-engineering-node
      dockerfile: Dockerfile
    volumes:
      - ./feature-engineering-node:/engineering
      - /engineering/.venv
    env_file:
      - .env
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 8002:8002
    networks:
      - automl

  feature-selection-node:
    build:
      context: ./feature-selection-node
      dockerfile: Dockerfile
    volumes:
      - ./feature-selection-node:/selection
      - /selection/.venv
    env_file:
      - .env
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 8003:8003
    networks:
      - automl

  classical-modeling-node:
    build:
      context: ./classical-modeling-node
      dockerfile: Dockerfile
    volumes:
      - ./classical-modeling-node:/selection
      - /selection/.venv
    env_file:
      - .env
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - 8004:8004
    networks:
      - automl

  user-fe:
    build:
      context: .
      dockerfile: user-fe/Dockerfile
    image: ${USER_FE_IMAGE:-user-fe:dev}
    ports:
      - 3000:3000
    volumes:
      - ./user-fe:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      pgadmin4:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      user-be:
        condition: service_started
    networks:
      - automl

networks:
  automl:

volumes:
  inventory_dev_db_data:
  inventory_dev_pgadmin_data:

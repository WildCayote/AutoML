version: "3.8"

services:
  db:
    image: postgis/postgis
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - inventory_dev_db_data:/var/lib/postgresql/data
    networks:
      - automl

  pgadmin4:
    image: dpage/pgadmin4
    ports:
      - 8001:80
    env_file:
      - .env
    volumes:
      - inventory_dev_pgadmin_data:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - automl

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - automl

  seaweedfs-s3:
    image: chrislusf/seaweedfs
    container_name: seaweedfs-s3
    ports:
      - "8333:8333"
    volumes:
      - ${SEAWEEDFS_CONFIG_PATH}:/etc/seaweedfs/config.json
    entrypoint: /bin/sh -c
    command: |
      "weed server -s3 -s3.config /etc/seaweedfs/config.json"
    restart: unless-stopped
    networks:
      - automl

  user-be:
    restart: always
    build:
      context: ./user-be
      dockerfile: Dockerfile
    image: ${USER_BE_IMAGE:-user-be:dev}
    ports:
      - 3001:3001
    volumes:
      - ./user-be:/usr/src/app
      - /usr/src/app/node_modules
    env_file:
      - .env
    environment:
      SEAWEED_ACCESS_KEY: "any"
      SEAWEED_SECRET_KEY: "any"
      SEAWEED_S3_ENDPOINT: "http://seaweedfs-s3:8333" # Use the service name
      AWS_EC2_METADATA_DISABLED: "true" # Disable AWS metadata checks
      AWS_SDK_LOAD_CONFIG: "false" # Disable AWS config file loading

    depends_on:
      db:
        condition: service_healthy
      pgadmin4:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      seaweedfs-s3:
        condition: service_started
    networks:
      - automl

  data-profiling-node:
    build:
      context: ./data-profiling-node
      dockerfile: Dockerfile
    env_file:
      - .env
    restart: on-failure
    depends_on:
      rabbitmq:
        condition: service_healthy
      seaweedfs-s3:
        condition: service_started
    ports:
      - 8000:8000
    networks:
      - automl

networks:
  automl:

volumes:
  inventory_dev_db_data:
  inventory_dev_pgadmin_data:

import { Test, TestingModule } from '@nestjs/testing';
import { ForbiddenException } from '@nestjs/common';
import { AuthService } from './auth.service';
import { PrismaService } from 'src/prisma/prisma.service';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import * as argon from 'argon2';
import * as bcrypt from 'bcrypt';
import { PrismaClientKnownRequestError } from '@prisma/client/runtime/library';

// Create some fake tokens for testing
const fakeAccessToken = 'fake-access-token';
const fakeRefreshToken = 'fake-refresh-token';

describe('AuthService', () => {
  let service: AuthService;
  let prisma: PrismaService;
  let jwtService: JwtService;
  let configService: ConfigService;

  beforeEach(async () => {
    // Create mocks for the dependencies
    const prismaMock = {
      user: {
        // For signin and signup
        findFirst: jest.fn(),
        create: jest.fn(),
      },
      refreshToken: {
        // For saving refresh token and logout
        create: jest.fn(),
        update: jest.fn(),
      },
    };

    const jwtServiceMock = {
      sign: jest.fn(),
    };

    const configServiceMock = {
      get: jest.fn((key: string) => {
        if (key === 'ACCESS_TOKEN_SECRET') return 'access-secret';
        if (key === 'REFRESH_TOKEN_SECRET') return 'refresh-secret';
      }),
    };

    // Create a testing module with our mocks
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        AuthService,
        { provide: PrismaService, useValue: prismaMock },
        { provide: JwtService, useValue: jwtServiceMock },
        { provide: ConfigService, useValue: configServiceMock },
      ],
    }).compile();

    service = module.get<AuthService>(AuthService);
    prisma = module.get<PrismaService>(PrismaService);
    jwtService = module.get<JwtService>(JwtService);
    configService = module.get<ConfigService>(ConfigService);

    // Reset mocks before each test
    jest.clearAllMocks();
  });

  describe('signin', () => {
    const signInDto = {
      email: 'test@example.com',
      username: 'testuser',
      password: 'password123',
    };

    const userFromDb = {
      id: 'user-id',
      email: signInDto.email,
      username: signInDto.username,
      // Assume this is a valid hash generated by argon2.hash
      passwordHash: 'hashed-password',
    };

    it('should throw ForbiddenException if user is not found', async () => {
      (prisma.user.findFirst as jest.Mock).mockResolvedValue(null);

      await expect(service.signin(signInDto)).rejects.toThrow(
        ForbiddenException,
      );
      expect(prisma.user.findFirst).toHaveBeenCalledWith({
        where: {
          OR: [{ email: signInDto.email }, { username: signInDto.username }],
        },
      });
    });

    it('should throw ForbiddenException if password is incorrect', async () => {
      (prisma.user.findFirst as jest.Mock).mockResolvedValue(userFromDb);
      // Simulate password mismatch
      jest.spyOn(argon, 'verify').mockResolvedValue(false);

      await expect(service.signin(signInDto)).rejects.toThrow(
        ForbiddenException,
      );
      expect(argon.verify).toHaveBeenCalledWith(
        userFromDb.passwordHash,
        signInDto.password,
      );
    });

    it('should return tokens when credentials are valid', async () => {
      (prisma.user.findFirst as jest.Mock).mockResolvedValue(userFromDb);
      jest.spyOn(argon, 'verify').mockResolvedValue(true);

      // Mock JWT token generation
      (jwtService.sign as jest.Mock)
        // First call: refresh token
        .mockReturnValueOnce(fakeRefreshToken)
        // Second call: access token
        .mockReturnValueOnce(fakeAccessToken);

      // Mock saveRefreshToken to resolve without error
      jest.spyOn(service, 'saveRefreshToken').mockResolvedValue(undefined);

      const result = await service.signin(signInDto);

      expect(result).toEqual({
        refresh_token: fakeRefreshToken,
        access_token: fakeAccessToken,
      });
      expect(jwtService.sign).toHaveBeenNthCalledWith(
        1,
        { userId: userFromDb.id, userName: userFromDb.username },
        expect.objectContaining({
          secret: 'refresh-secret',
          expiresIn: '7d',
        }),
      );
      expect(jwtService.sign).toHaveBeenNthCalledWith(
        2,
        { userId: userFromDb.id, userName: userFromDb.username },
        expect.objectContaining({
          secret: 'access-secret',
          expiresIn: '15m',
        }),
      );
      expect(service.saveRefreshToken).toHaveBeenCalledWith(
        userFromDb.id,
        fakeRefreshToken,
      );
    });
  });

  describe('signup', () => {
    const signUpDto = {
      email: 'new@example.com',
      username: 'newuser',
      password: 'newpassword',
    };

    const createdUser = {
      id: 'new-user-id',
      email: signUpDto.email,
      username: signUpDto.username,
      passwordHash: 'hashed-password',
    };

    it('should return the user without the password hash', async () => {
      // Mock argon.hash to return a dummy hash
      jest.spyOn(argon, 'hash').mockResolvedValue('hashed-password');
      (prisma.user.create as jest.Mock).mockResolvedValue(createdUser);

      const result = await service.signup(signUpDto);

      expect(prisma.user.create).toHaveBeenCalledWith({
        data: {
          email: signUpDto.email,
          username: signUpDto.username,
          passwordHash: 'hashed-password',
        },
      });
      // The returned user should not include the passwordHash
      expect(result).toEqual({
        id: createdUser.id,
        email: createdUser.email,
        username: createdUser.username,
      });
    });

    it('should throw ForbiddenException if duplicate credentials', async () => {
        // Create an error instance that simulates PrismaClientKnownRequestError.
        const prismaError = Object.setPrototypeOf({ code: 'P2002' }, PrismaClientKnownRequestError.prototype);
        jest.spyOn(argon, 'hash').mockResolvedValue('hashed-password');
        (prisma.user.create as jest.Mock).mockRejectedValue(prismaError);
    
        await expect(service.signup(signUpDto)).rejects.toThrow(ForbiddenException);
      });
  });

  describe('refresh', () => {
    it('should return a new access token', async () => {
      const userId = 'user-id';
      const userName = 'user-name';

      // Mock signAccessToken to return a fake token
      jest.spyOn(service, 'signAccessToken').mockReturnValue(await Promise.resolve(fakeAccessToken));

      const result = await service.refresh(userId, userName);

      expect(service.signAccessToken).toHaveBeenCalledWith(userId, userName);
      expect(result).toEqual({ access_token: fakeAccessToken });
    });
  });

  describe('logOut', () => {
    const userId = 'user-id';

    it('should successfully log out the user', async () => {
      // Mock prisma.refreshToken.update to resolve successfully
      (prisma.refreshToken.update as jest.Mock).mockResolvedValue({
        msg: 'Logout successful',
      });

      const result = await service.logOut(userId);
      expect(prisma.refreshToken.update).toHaveBeenCalledWith({
        where: { userId },
        data: { hash: null },
      });
      expect(result).toEqual({ msg: 'Logout successful' });
    });

    it('should throw an error if record is not found', async () => {
        (prisma.refreshToken.update as jest.Mock).mockRejectedValue('RecordNotFound');
    
        await expect(service.logOut(userId)).rejects.toThrow('User has already logged out!');
      });
  });

  
});
